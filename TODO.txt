**********************************************
  * TODO:
pwrdwnsys: controlled cpu and network utilization

grep -se "^cpu[[:blank:]]" /proc/stat
> cat /proc/stat
cpu  usr nic  sys     idle iowait irq softirq steal rest
cpu  2255 34 2290 22625563   6290 127     456     0 0 0
cpu  1569  0 1012   243438   8918 143      68     0 0 0

working_time = usr + nic + sys + irq + softirq + steal
idle_time = idle + iowait

The very first "cpu" line aggregates the numbers in all of the other "cpuN" lines.
These numbers identify the amount of time the CPU has spent performing different kinds of work. Time units are in USER_HZ or Jiffies (typically hundredths of a second).
The meanings of the columns are as follows, from left to right:
    user: normal processes executing in user mode
    nice: niced processes executing in user mode
    system: processes executing in kernel mode
    idle: twiddling thumbs
    iowait: waiting for I/O to complete
    irq: servicing interrupts
    softirq: servicing softirqs


from busybox, its top magic is:

static const char fmt[] ALIGN1 = "cp%*s %llu %llu %llu %llu %llu %llu %llu %llu";

    int ret;

    if (!fgets(line_buf, LINE_BUF_SIZE, fp) || line_buf[0] != 'c' /* not "cpu" */)
        return 0;
    ret = sscanf(line_buf, fmt,
            &p_jif->usr, &p_jif->nic, &p_jif->sys, &p_jif->idle,
            &p_jif->iowait, &p_jif->irq, &p_jif->softirq,
            &p_jif->steal);
    if (ret >= 4) {
        p_jif->total = p_jif->usr + p_jif->nic + p_jif->sys + p_jif->idle
            + p_jif->iowait + p_jif->irq + p_jif->softirq + p_jif->steal;
        /* procps 2.x does not count iowait as busy time */
        p_jif->busy = p_jif->total - p_jif->idle - p_jif->iowait;
    }


/sys/class/block/dev.../stat
Name            units         description
----            -----         -----------
read I/Os       requests      number of read I/Os processed
read merges     requests      number of read I/Os merged with in-queue I/O
read sectors    sectors       number of sectors read
read ticks      milliseconds  total wait time for read requests
write I/Os      requests      number of write I/Os processed
write merges    requests      number of write I/Os merged with in-queue I/O
write sectors   sectors       number of sectors written
write ticks     milliseconds  total wait time for write requests
in_flight       requests      number of I/Os currently in flight
io_ticks        milliseconds  total time this block device has been active
time_in_queue   milliseconds  total wait time for all requests
discard I/Os    requests      number of discard I/Os processed
discard merges  requests      number of discard I/Os merged with in-queue I/O
discard sectors sectors       number of sectors discarded
discard ticks   milliseconds  total wait time for discard requests
# cat /sys/class/block/sda2/stat
    readb    readm   reads    readt     writeb writem   writes   writet inflight     rest
    1578     3519    57962    42543      322      422     6672     2767        0     1605    44489        0        0        0        0

for iface in $(ls -d1 /sys/class/net/* 2>/dev/null); do
	cat "${iface}/statistics/rx_bytes"
	cat "${iface}/statistics/tx_bytes"
done

	if [ ${MinRxBps} -ne 0 ]; then
		local r=$(GetRxBytes) c=$(_UTCseconds)
		if [ -n "${CheckTime}" ]; then
			local b=$((${r}-RxBytes)) \
				t=$((${c}-CheckTime))
			if [ ${t} -gt 0 ] && \
			[ $((b/t)) -ge ${MinRxBps} ]; then
				rc=0
				_msg "Networking of ${HotSpot}:'${WwanSsid}' to" \
					"the external network is working"
			fi
			[ -z "${Debug}" ] || \
				_applog "STA interface received ${b} bytes in ${t} seconds"
		fi
		CheckTime=${c}
		RxBytes=${r}
	fi


**********************************************
  * TODO:
  jobadmin-flashgot:
  by now the best downloader is aria2c.
  we have not set yet:
   --dht-listen-port=port
   --bt-external-ip=<IPADDRESS>

  wget options --continue and --start-pos are incompatible,
  curl and wget must compute start-pos to continue an interrupted partial download.
  test wget behaviour downloading meta4|metalink files
**********************************************
  * TODO:
  exec systemd-inhibit as a subprocess of their job
  and the jobadmin daemon should wait
   for this job end
   notify the users,
   on job error must hold the job queue.

Comment- jobadmin checks activity by doing a list of active jobs;
  systemd-inhibit is enabled as a semaphore for other power commands
  that do not depend on jobadmin.
**********************************************
  * TODO:
cron jobs to purge spool files or jobs older than a number of days
**********************************************
  * TODO:
  System-wide templates for jobs.
  Create user jobs based on system templates.
**********************************************
  * TODO:
  parse system configuration to detect the combination of keys needed
  to open a new tab in the current xterm.
# sed -nre '\|\[shortcut\]|,\|^[[:blank:]]*$| {\|^new_tab_accel=(.*)| s||\1|p}' ~/.config/lxterminal/lxterminal.conf
# <CTRL><SHIFT>T
# .config/xfce4/terminal/accels.scm
# ;(gtk_accel_path "<Actions>/terminal-window/new-tab" "<Primary><Shift>t")
# .config/xfce4/terminal/terminalrc
# AccelNewTab=
**********************************************
  * TODO:
  Spool management.
  - test printing to a writer
**********************************************


**********************************************
Weird idea: Implement job scheduling, internal in jobadmin,
    User input for cron.
  * TODO:
    - add functionality for job schedule
    - three new fields:
    date/time schedule: ja_datetime
    date schedule: ja_date
    time schedule: ja_time
      add that field to commands and write it to the usr/jobs.scd index files.
    - getopt-sh
    new parameters types: date, time, date-time
    Â¿ US english only, may parse dates in the local language ??

Parse dates according to local settings for each user.

export LC_ALL=ca_ES.UTF-8 ; date '+%d-%b-%y %H:%M:%S'
24-set-15 18:15:49

export LC_ALL=ca_ES.UTF-8 ; date '+%d-%b-%y %H:%M:%S' --date='24-set-15 18:15:49'
not valid, english only
***
# LC_ALL=en_US.UTF-8 locale -k LC_TIME
abday="Sun;Mon;Tue;Wed;Thu;Fri;Sat"
day="Sunday;Monday;Tuesday;Wednesday;Thursday;Friday;Saturday"
abmon="Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec"
mon="January;February;March;April;May;June;July;August;September;October;November;December"
am_pm="AM;PM"
d_t_fmt="%a %d %b %Y %r %Z"
d_fmt="%m/%d/%Y"
t_fmt="%r"
t_fmt_ampm="%I:%M:%S %p"
era=
era_year=""
era_d_fmt=""
alt_digits=
era_d_t_fmt=""
era_t_fmt=""
time-era-num-entries=0
time-era-entries="S"
week-ndays=7
week-1stday=19971130
week-1stweek=7
first_weekday=1
first_workday=2
cal_direction=1
timezone=""
date_fmt="%a %b %e %H:%M:%S %Z %Y"
time-codeset="UTF-8"
***
$ LC_ALL=en_US.UTF-8 locale -c mon
LC_TIME
January;February;March;April;May;June;July;August;September;October;November;December
**********************************************
