#!/bin/bash

JA_LIB="lib/"
JA_CONF_DIR="conf/"
JA_CONF_PARMS="${JA_CONF_DIR}parms.conf"
JA_CONF_PARMVALS="${JA_CONF_DIR}parmvals.conf"

. "${JA_LIB}libjobadmin"

_extended_module_options() {
	local options="${1}"
	local module="${2}"
	local extraoption="@JA_ASSIST@JA_HELP@"

	awk -v module="${module}" \
		-v cparms="${JA_CONF_PARMS}" \
		'BEGIN{
		while (getline < cparms > 0) {
			if ($1 !~ "^#") {
				v[$1,2]=$2; v[$1,3]=$3
			}
		}
		RS="[@\n]"}
		$1 { if ( v[$1,3] )
				print v[$1,3], $2 v[$1,2], $1
		}' <<< "${options}${extraoption}"
}

_param_values() {
	local positional="${1:-}"
	_extended_module_options "$(_options_module "${module}")" "${module}" | \
		awk -v module="${module}" 'BEGIN{c=0}
		$1 !~ "^#" && $2 ~ "[chimv]" {c++
		print c,$1,$2,$3}
		END{exit (c == 0)}' | \
		sort -k4,4 -u | \
		sort -nk1,1 | \
		awk -v positional="${positional}" \
			-v module="${module}" \
			-v cparmvals="${JA_CONF_PARMVALS}" \
			'BEGIN{PROCINFO["sorted_in"] = "@ind_num_desc"
				vold = ""
				while (getline < cparmvals > 0)
					if (vold != $1 && ($2 == module || $2 == "*")) {
						vold = $1
						c[$1] = $3
					}
				if ( positional ) {
					position=0
					idnt="\t\t\t"
				} else
					idnt="\t\t"
			}
		{
		if ( positional ) {
			if ( $3 !~ "[p]" )
				exit
			position++
			printf "\t\t" position
		} else {
			if ( $3 ~ "[i]" )
				next
			split($2, a, ",")
			printf "\t"
			sep=""
			for (v in a) {
				printf sep a[v]
				sep="|"
			}
		}
		print ")"
		if ( $3 ~ "[u]" )
			print idnt "cur=\"${cur^^}\""
		if ( $3 ~ "[lia]" )
			print idnt "cur=\"${cur,,}\""
		if ( $3 ~ "[i]" ) {
			print idnt "COMPREPLY=( $( compgen -W \"yes no y n 0 1 t f\" -- \"$cur\" ) )"
		} else
		if ( $3 ~ "[v]" ) {
			switch ($4) {
			case "JA_DAYSOLD":
			case "JA_DELAY":
			case "JA_KEEP":
			case "JA_LINES":
			case "JA_MAXJOBS":
			case "JA_PID":
				print idnt "if [[ $cur ]]; then"
				print idnt "\tCOMPREPLY=( $( compgen -P \"$cur\" -W \"{0..9}\" ) )"
				print idnt "\tcompopt -o nospace"
				print idnt "else"
				print idnt "\tCOMPREPLY=( $( compgen -W \"{0..9}\" ) )"
				print idnt "\tcompopt -o nospace"
				print idnt "fi"
				break
			case "JA_COMMAND":
				printf idnt "COMPREPLY=( $( compgen -W \x27$( _jobadmin_modules"
				print " )\x27 -- \"$cur\" ) )"
				break
			case "JA_JOB":
				printf idnt "COMPREPLY=( $( compgen -W \x27$( _jobadmin_jobs"
				print " )\x27 -- \"$cur\" ) )"
				break
				JA_LOGF
			case "JA_LOGF":
				print idnt "[ -n \"$cur\" ] || cur=\"/var/log/jobadmin\""
				print idnt "[ \"${cur:0:1}\" = \"/\" ] || cur=\"/var/log/$cur\""
				print idnt "_filedir"
				break
			case "JA_MSGQ":
				printf idnt "COMPREPLY=( $( compgen -W \x27$( _jobadmin_msgqs"
				print " )\x27 -- \"$cur\" ) )"
				break
			case "JA_ONERROR":
				print idnt "_filedir"
				break
			case "JA_OUTPTY":
				print idnt "COMPREPLY=( $( compgen -W \"{1..5}\" -- \"$cur\" ) )"
				break
			case "JA_PIDS":
				print idnt "if [[ $cur =~ [al] ]]; then"
				print idnt "\tCOMPREPLY=( \"all\" )"
				print idnt "elif [[ $cur ]]; then"
				print idnt "\tCOMPREPLY=( $( compgen -P \"$cur\" -W \"{0..9},\" ) )"
				print idnt "\tcompopt -o nospace"
				print idnt "else"
				print idnt "\tCOMPREPLY=( $( compgen -W \"{0..9} , all\" ) )"
				print idnt "\tcompopt -o nospace"
				print idnt "fi"
				break
			case "JA_PTY":
				print idnt "COMPREPLY=( $( compgen -W \"{1..5}\" -- \"$cur\" ) )"
				break
			case "JA_PWD":
				print idnt "_filedir -d"
				break
			case "JA_SEQ":
				print idnt "COMPREPLY=( $( compgen -W \"{1..3}\" -- \"$cur\" ) )"
				break
			}
		} else
		if ( $3 ~ "[m]" ) {
			print idnt "_filedir"
		} else
		if ( $3 ~ "[h]" ) {
			if (c[$4] ~ "^#")
				print idnt "_jobadmin_mchoice \"$( _jobadmin_" substr(c[$4],2) " )\""
			else
				print idnt "_jobadmin_mchoice \"$( _jobadmin_extopts \"" c[$4] "\" )\""
		} else
		if (c[$4] ~ "^#") {
			printf idnt "COMPREPLY=( $( compgen -W \x27$( _jobadmin_"
			print substr(c[$4],2) " )\x27 -- \"$cur\" ) )"
		} else {
			printf idnt "COMPREPLY=( $( compgen -W \x27"
			printf gensub("[,|]" , " " , "g" , c[$4])
			print "\x27 -- \"$cur\" ) )"
		}
		print idnt "return 0"
		print idnt ";;"
		}'
	:
}

_positional_params() {
	awk 'BEGIN{RS="[@\n]"}
		$2 {if ($2 ~ "[p]")
			c++
		else
			exit}
		END{print c+0}' \
		< <(_options_module "${module}")
}

_create_completion() {
	cat <<EOF
# jobadmin(1) completion                             -*- shell-script -*-
_${module}() {
EOF
	cat <<'EOF'
	local module="${1}"
	local cur prev words cword split
	_init_completion -s || \
		return 0

	. "/etc/default/jobadmind"
	. "${JA_LIB}libcompletion"

EOF

	if [ "${module}" = "jobadmin" ]; then
		cat <<'EOF'
	if [ $COMP_CWORD -gt 1 ] && \
	[[ ${COMP_WORDS[1]} =~ ^[^-].* ]]; then
		local root_command=${COMP_WORDS[1]}
		_command_offset 1
		return 0
	fi

EOF
	fi

	! awk 'BEGIN{RS="[@\n]"}
		$1 ~ "^(JA_JOB_CMD|JA_COMMAND)$" {rc = -1; exit}
		END{exit rc+1}' \
		< <(_options_module "${module}") || \
		cat <<'EOF'
	local i ind=""
	for (( i=1; i <= $COMP_CWORD; i++ )); do
		if [ -n "${ind}" ]; then
			[ "${COMP_WORDS[i]}" != "=" ] || \
				continue
			[ -n "${COMP_WORDS[i]}" ] || \
				break
			local root_command=${COMP_WORDS[i]}
			_command_offset $i
			return 0
		elif [[ ${COMP_WORDS[i]} =~ ^(--|--cmd|--command)$ ]]; then
			ind="y"
		fi
	done

EOF

	cat <<'EOF'
	case $prev in
EOF

	_param_values

	cat <<'EOF'
	esac

	$split && return 0

EOF

	cat <<EOF
	local pos=\$(_jobadmin_pos_arg $(_positional_params))
EOF

	cat <<'EOF'
	[ ${cword} -gt ${pos} ] || \
		case "${cword}" in
EOF

	_param_values "y"

	cat <<'EOF'
		esac

	_jobadmin_cur_arg "${pos}"
} &&
EOF

	cat <<EOF
complete -F _${module} ${module}

# ex: ts=4 sw=4 et filetype=sh
EOF
}

mkdir -p bash-completion.d
for module in $(basename -s '.module' $(_expand_glob "${JA_LIB}*.module")); do
	_create_completion > "bash-completion.d/${module}"
	echo  "bash-completion.d/${module}"
done
:
