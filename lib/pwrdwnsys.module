#!/bin/bash

#  Jobs management application for the Linux OS
#  $Revision: 1.66 $
#
#  Copyright (C) 2008-2017 Jordi Pujol <jordipujolp AT gmail DOT com>
#
#  This file is part of the LneT Jobadmin package,
#   http://livenet.ddns.net .
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 1, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  Please report bugs to <jordipujolp AT gmail DOT com>.
#
#
#************************************************************************

# power off

_pwrdwnsys_usage="Power Down System

pwrdwnsys -o|--option immed -d|--delay 30 -r|--restart hibernate

- enable or cancel a controlled system poweroff

-o|--option 'IMMED|ASAP|CNTRLD|CANCEL|STATUS' : when to shutdown the system:
	IMMED - immediately
	ASAP - when finishing all jobs that are running.
		No other pending jobs will be started
	CNTRLD - when all pending jobs have finished
		and the system is idle (as set in the default parameters)
	CANCEL - cancel a previous request of pwrdwnsys not yet executed
	STATUS - show actual pwrdwnsys status
-r|--restart 'POWEROFF|HALT|REBOOT|SUSPEND|HIBERNATE'
	method used to shutdown/restart
-d|--delay '30'
	seconds waiting for new pending jobs or some user action.

-h|--help  : help"

_pwrdwnsys_options="JA_OPTION pr@
JA_RESTART pr@
JA_DELAY r@
JA_IDLES@
JA_PERSIST"

_pwrdwnsys_report() {
	_usr_notify "Power down system option '${JA_OPTION}' is \
'$(test -s "${JA_PWROPTION}" && printf '%s' "enabled" || printf '%s' "disabled")' \
for ${JA_RESTART}\
$(test ${JA_DELAY} -eq 0 || echo ", ${JA_DELAY} seconds delayed")\
$(test -z "${JA_IDLES}" || echo ", check-idle ${JA_IDLES}")\
$(test -z "${JA_PERSIST}" || echo ", persistent")." 2>&1
}

_pwrdwnsys() {

	# permission to access this file is not correctly checked
	# until the program executes this command
	getfacl "${JA_PWRATTRS}" > /dev/null 2>&1 || return 1

	if ! test -r "${JA_PWRATTRS}"; then
		_usr_notify "Error: Not authorized to read pwrdwnsys status."
		return 1
	fi
	if [ "${JA_OPTION}" = "STATUS" ]; then
		if JA_OPTION="$(_read_option "JA_OPTION" "${JA_PWRATTRS}")"; then
			JA_RESTART="$(_read_option "JA_RESTART" "${JA_PWRATTRS}")" || :
			JA_DELAY="$(_read_option "JA_DELAY" "${JA_PWRATTRS}")" || \
				JA_DELAY=0
			JA_PID="$(_read_option "JA_PID" "${JA_PWRATTRS}")" || :
			JA_PERSIST="$(_read_option "JA_PERSIST" "${JA_PWRATTRS}")" || :
			JA_IDLES="$(_read_option "JA_IDLES" "${JA_PWRATTRS}")" || :
			_pwrdwnsys_report
		else
			_usr_notify "Power down system is disabled." 2>&1
		fi
		[ ! -s "${JA_TMP}jobs_active.lst" ] || \
			cat "${JA_TMP}jobs_active.lst"
		_pipe_write "_jobadmin" || :
		return 0
	fi
	if ! _test_rw "${JA_PWRATTRS}"; then
		_usr_notify "Error: Not authorized to stop the system."
		return 1
	fi
	if [ "${JA_OPTION}" = "CANCEL" ]; then
		if [ -s "${JA_PWROPTION}" ]; then
			msg="Cancelling system shutdown."
			_usr_notify "${msg}"
			_pipe_write "_msg_allusrs:${JA_USR}:${msg}"
		else
			_usr_notify "Warning: Power down system is not active."
		fi
		truncate -s 0 "${JA_PWROPTION}" \
			"${JA_PWRATTRS}"
		_pipe_write "_jobadmin" || :
		return 0
	fi
	if [ -s "${JA_PWROPTION}" ] || \
	[ -n "$(_read_option "JA_PERSIST" "${JA_PWRATTRS}")" ]; then
		_usr_notify "Error: Power down system is enabled now, please cancel it before changing options."
		return 1
	fi
	truncate -s 0 "${JA_PWRATTRS}"
	_set_option "${JA_PWRATTRS}" "JA_USR" "${JA_USRACT}"
	_set_option "${JA_PWRATTRS}" "JA_OPTION" "${JA_OPTION}"
	_set_option "${JA_PWRATTRS}" "JA_RESTART" "${JA_RESTART}"
	_set_option "${JA_PWRATTRS}" "JA_DELAY" "${JA_DELAY}"
	[ -z "${JA_IDLES}" ] || \
		_set_option "${JA_PWRATTRS}" "JA_IDLES" "${JA_IDLES}"
	[ "${JA_PERSIST}" != "Yes" ] || \
		_set_option "${JA_PWRATTRS}" "JA_PERSIST" "${JA_PERSIST}"

	printf '%s\n' "${JA_OPTION}" > "${JA_PWROPTION}"

	if _pipe_write "_jobadmin"; then
		_pwrdwnsys_report
	fi
} # pwrdwnsys
