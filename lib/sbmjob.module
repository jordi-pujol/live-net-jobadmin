#!/bin/bash

#  Jobs management application for the Linux OS
#  $Revision: 1.66 $
#
#  Copyright (C) 2008-2017 Jordi Pujol <jordipujolp AT gmail DOT com>
#
#  This file is part of the LneT Jobadmin package,
#   http://livenet.ddns.net .
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 1, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  Please report bugs to <jordipujolp AT gmail DOT com>.
#
#
#************************************************************************

#

_sbmjob_usage="Submit Job

sbmjob [options] command to be executed

- submit a job

all parameters are optional,
only the command to be executed is required.

Examples:

Submit:

sbmjob --job lstmp -d pgmr --cmd ls -la /tmp

or:

sbmjob --job 'mylstmp' -q batch -- ls -la /tmp"

_sbmjob_options="JA_JOB pr@
JA_JOBD@
JA_JOBQ@
JA_OUTQ@
JA_OUTHLD@
JA_SPLFSAV@
JA_OUTPTY@
JA_LJOIN@
JA_PWD@
JA_HLD@
JA_SAVED@
JA_PTY@
JA_AUTOSTR@
JA_DBG@
JA_ONERROR@
JA_USR@
JA_JOB_CMD r"

_sbmjob() {
	[ -n "${JA_JOBD}" ] || \
		JA_JOBD="${JA_USR_JOBD}"
	if ! _jobd_dsc "${JA_JOBD}"; then
		_usr_notify "Error: invalid job description '${JA_JOBD}'"
		return 1
	fi

	[ -n "${JA_JOBQ}" ] || \
		JA_JOBQ="${JA_JOBD_JOBQ}"
	if ! _jobq_dsc "${JA_JOBQ}"; then
		_usr_notify "Error: invalid job queue '${JA_JOBQ}'"
		return 1
	fi

	[ -n "${JA_OUTQ}" ] || \
		JA_OUTQ="${JA_JOBD_OUTQ}"
	if ! _outq_dsc "${JA_OUTQ}"; then
		_usr_notify "Error: invalid output queue '${JA_OUTQ}'"
		return 1
	fi

	[ -n "${JA_OUTHLD}" ] || \
		JA_OUTHLD="${JA_JOBD_SPLFHLD}"
	[ "${JA_OUTHLD}" = "Yes" ] || \
		JA_OUTHLD=""

	[ "${JA_SPLFSAV}" = "Yes" ] || \
		JA_SPLFSAV=""

	[ -n "${JA_OUTPTY}" ] || \
		JA_OUTPTY="${JA_JOBD_OUTPTY}"

	[ -n "${JA_LJOIN}" ] || \
		JA_LJOIN="${JA_JOBD_LJOIN}"
	[ "${JA_LJOIN}" = "Yes" ] || \
		JA_LJOIN=""

	[ "${JA_SAVED}" = "Yes" ] || \
		JA_SAVED=""

	[ "${JA_AUTOSTR}" = "Yes" ] || \
		JA_AUTOSTR=""

	[ -n "${JA_DBG}" ] || \
		JA_DBG="${JA_JOBD_DBG}"
	[ "${JA_DBG}" = "Yes" ] || \
		JA_DBG=""

	[ -n "${JA_PWD}" ] || \
		JA_PWD="$(pwd)"
	if [ -d "${JA_PWD}" ]; then
		JA_PWD="$(_realpath "${JA_PWD}")"
	else
		_usr_notify "Error: invalid current directory '${JA_PWD}'"
		return 1
	fi

	JA_JOB_STS=""
	JA_HLD="${JA_HLD:-"${JA_JOBD_HLD}"}"

	JA_PTY="${JA_PTY:-"${JA_JOBD_PTY}"}"

	[ -n "${JA_ONERROR}" ] || \
		JA_ONERROR="${JA_JOBD_ONERROR}"

	#if cd "${JA_PWD}" && command -v "${1}" > /dev/null 2>&1; then
	if cd "${JA_PWD}"; then
		if [ -z "${JA_JOB}" ]; then
			if ! JA_JOB="$(basename "${1}")"; then
				_usr_notify "Error: job '${1}.${JA_USR}' invalid jobname."
				return 1
			fi
		fi

		if [ -z "${JA_JOB}" ]; then
			_usr_notify "Error: job '.${JA_USR}' Invalid job name"
			return 1
		fi

		_job_canonize_name

		_job_add || \
			return 1
	else
		_usr_notify "Error: job '${JA_JOB}.${JA_USR}' invalid directory '${JA_PWD}'"
		return 1
	fi
} # sbmjob
