#!/bin/bash

#  Jobs management application for the Linux OS
#  $Revision: 1.66 $
#
#  Copyright (C) 2008-2017 Jordi Pujol <jordipujolp AT gmail DOT com>
#
#  This file is part of the LneT Jobadmin package,
#   http://livenet.ddns.net .
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 1, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  Please report bugs to <jordipujolp AT gmail DOT com>.
#
#
#************************************************************************

# wrksplf

. "${JA_LIB}libparms"

_wrksplf_options="JA_SPLF_STSL pr@
JA_OUTQL pr@
JA_USRL pr@
JA_JOB@
JA_USR@
JA_PID@
JA_SEQ"

_wrksplf_chgview() {
	case "${JA_SEQ}" in
	2)
		JA_DIALOG_FIELDS="Opt:3:2:3 Splf:35 Stat:10 Act/Request:15 Pri:3. Date:19 Out_Queue:15"
		;;
	*)
		JA_DIALOG_FIELDS="Opt:3:2:3 OutQ/Splf:35 Stat:10 Act/Request:15 Pri:3. Date:19"
		JA_SEQ=1
		;;
	esac
}

_wrksplf_outq_line() {
	# global all_splfs
	local outq="${1}"
	local found outq_actjobs outq_hld wtr wtrf

	outq_hld="$(_read_option "JA_HLD" "${JA_SPOOL}${outq}.outq.attrs")" || \
		outq_hld="RLS"
	outq_actjobs="$( awk -v outq="${outq}" \
		'$2 == outq && $10 ~ "WTR" {i++}
		END{print i+0}' <<< "${list_splfs}" )"
	found=""
	for wtr in $(cat "${JA_TMP}rwtrs.lst" | tr -s "," " "); do
		wtrf="${JA_SPOOL}${wtr}.wtr"
		if ! _read_option "JA_WTR_STS" "${wtrf}" > /dev/null && \
		_read_option "JA_WTR_OUTQS" "${wtrf}" | grep -qswe "${outq}"; then
			found="y"
			wtr="WTR/${wtr}/$(_read_option "JA_PRT" "${wtrf}")"
			break
		fi
	done
	[ -n "${found}" ] || wtr="-"
	printf '%s ' "OUTQ/${outq}" "${outq_hld}" \
		"${outq_actjobs}" "-" "${wtr}"
	printf '\n'
	:
}

_wrksplf_outqs() {
	local outq="${1}"
	local outq1 outqs1 found

	outqs1=""; found=""
	for outq1 in ${outqs}; do
		if [ "${outq}" != "${outq1}" ] &&
		[ -z "${found}" ]; then
			_wrksplf_outq_line "${outq1}"
		elif [ "${outq}" = "${outq1}" ]; then
			found="y"
			_wrksplf_outq_line "${outq}"
			outq_previous="${outq}"
		else
			outqs1="${outqs1} ${outq1}"
		fi
	done
	outqs="${outqs1}"
	:
}

_wrksplf_splfs() {
	local wtr outq splf_sts_order outpty datesplf \
			splf job job_usr job_pid splf_sts outq_sts splf_attrs
	local outq_previous
	local outqs

	outqs="$(tr -s '[,[:blank:]]' '\n' <<< "${JA_OUTQL}" | sort)"
	outq_previous=""
	unset wtr outq splf_sts_order outpty datesplf \
			splf job job_usr job_pid splf_sts outq_sts splf_attrs
	while IFS=$'\t' read wtr outq splf_sts_order outpty datesplf \
	splf job job_usr job_pid splf_sts outq_sts splf_attrs rest; do
		[ -n "${datesplf}" ] && \
		[ -s "${splf_attrs}" ] || continue
		if [ "${outq_previous}" != "${outq}" ] && \
		[ "${JA_SEQ}" = "1" ]; then
			_wrksplf_outqs "${outq}"
			outq_previous="${outq}"
		fi

		cause="-"
		if [ "${splf_sts}" = "WTR" ]; then
			if request="$(_read_option "JA_REQUEST" "${splf_attrs}")"; then
				cause="$(ipptool -t \
					"${JA_CUPS_SERVER}jobs/$(sed -nre \
					'\|.*-([[:digit:]]+)$| s||\1|p' <<< "${request}")" \
					"${JA_LIB}get-job-attributes" | \
					awk '$1 == "job-state" {print $NF; s=-1; exit}
					END{exit s+1}')" || :
			fi
		else
			cause="$(_read_option "JA_CAUSE" "${splf_attrs}")" || :
		fi
		[ -n "${cause}" ] || cause="-"
		printf '%s ' "${splf}.${job}.${job_usr}.${job_pid}" \
			"${splf_sts}" "${cause}" "${outpty}" "${datesplf}" \
			"${outq}$(test "${outq_sts}" = "-" || printf '%s' "/${outq_sts}")" \
			"${wtr}" "${splf_attrs}"
		printf '\n'
		unset wtr outq splf_sts_order outpty datesplf \
			splf job job_usr job_pid splf_sts outq_sts splf_attrs
	done <<< "${list_splfs}"
[ "${JA_SEQ}" != "1" ] || \
	[ -z "${outqs}" ] || \
		_wrksplf_outqs "---"
	:
}

_wrksplf_refresh() {
	local auto="${1:-}"
	# global all_splfs all_splfs_count M cmd_options
	local list_splfs

	M=""; cmd_options=""; JA_DIALOG_LABEL=""
	if [ -n "${auto}" ]; then
		[ -n "${autorefresh}" ] || \
			return 0
		sleep 1
	fi

	if [ "${JA_SEQ}" = "1" ]; then
		list_splfs="$(_find_splfs "${JA_USRL}" \
			"" "${JA_SPLF_STSL}" "${JA_OUTQL}" "${JA_JOB}" "${JA_PID}" | \
			sort -t $'\t' -k 2,2 -k 3n,3 -k 4nr,4 -k 5n,5)"
	else
		list_splfs="$(_find_splfs "${JA_USRL}" \
			"" "${JA_SPLF_STSL}" "${JA_OUTQL}" "${JA_JOB}" "${JA_PID}" | \
			sort -t $'\t' -k 3n,3 -k 4nr,4 -k 5n,5)"
	fi

	all_splfs="$(_wrksplf_splfs)"
	all_splfs_count="$(awk 'END{print NR}' <<< "${all_splfs}")"
	:
}

_wrksplf_OK() {
	i=1
	err=""
	M0="${M}"
	while [ ${i} -le ${all_splfs_count} ]; do
		m="$(_print_line "${i}" <<< "${M}")"
		if [ -n "${m}" ]; then
			e=""
			JA_CMD_ARGS=()
			JA_CMD_CMD=""
			act_splf="$(awk -v i="${i}" 'NR == i {print $1}' <<< "${all_splfs}")"
			case "${act_splf}" in
			WTR/*)
				if _cmd_abv_dsc "${m}" "WTR,SYS"; then
				if echo "${JA_CMD_OBJ}" | grep -qswe "WTR"; then
					_options_reuse "${JA_CMD_CMD}" \
					"JA_WTR=$( cut -f 2 -d '/' <<< "${act_splf}")"
				fi
				else
					e="Yes"
				fi
				;;
			OUTQ/*)
				if _cmd_abv_dsc "${m}" "OUTQ,SYS"; then
				if echo "${JA_CMD_OBJ}" | grep -qswe "OUTQ"; then
					_options_reuse "${JA_CMD_CMD}" \
					"JA_OUTQ=$(cut -f 2 -d '/' <<<  "${act_splf}" )"
				fi
				else
					e="Yes"
				fi
				;;
			*)
				if _cmd_abv_dsc "${m}" "SPLF,JOB,WTR,OUTQ,SYS"; then
					if echo "${JA_CMD_OBJ}" | grep -qswe "SPLF"; then
						_options_reuse "${JA_CMD_CMD}" \
						"JA_SPLF=$(cut -f 1 -s -d '.' <<< "${act_splf}")" \
						"JA_JOB=$(cut -f 2 -s -d '.' <<< "${act_splf}")" \
						"JA_USR=$(cut -f 3 -s -d '.' <<< "${act_splf}")" \
						"JA_PID=$(cut -f 4 -s -d '.' <<< "${act_splf}")"
					elif echo "${JA_CMD_OBJ}" | grep -qswe "JOB"; then
						_options_reuse "${JA_CMD_CMD}" \
						"JA_JOB=$(cut -f 2 -s -d '.' <<< "${act_splf}")" \
						"JA_USR=$(cut -f 3 -s -d '.' <<< "${act_splf}")" \
						"JA_PID=$(cut -f 4 -s -d '.' <<< "${act_splf}")"
					elif echo "${JA_CMD_OBJ}" | grep -qswe "WTR"; then
						wtr="$(awk -v i="${i}" \
						'NR == i {print $7; exit}' <<< "${all_splfs}" | \
						cut -f 1 -d '/')"
						[ "${wtr}" != "-" ] || \
							wtr=""
						_options_reuse "${JA_CMD_CMD}" \
						"JA_WTR=${wtr}"
					elif echo "${JA_CMD_OBJ}" | grep -qswe "OUTQ"; then
						_options_reuse "${JA_CMD_CMD}" \
						"JA_OUTQ=$(awk -v i="${i}" \
						'NR == i {print $6; exit}' <<< "${all_splfs}" | \
						cut -f 1 -d '/')"
					fi
				else
					e="Yes"
				fi
				;;
			esac
			if [ -z "${e}" ]; then
				if [ -n "${JA_CMD_CMD}" ]; then
					[ -z "${cmd_options}" ] || \
						eval JA_CMD_ARGS+=(${cmd_options})
					if [ -z "${JA_FKEY_CONFIRM}" -a \
					"${JA_CMD_TERMINAL}" -lt 1 ]; then
						_cmd_exec_background || e="No"
					else
						_cmd_exec || e="No"
					fi
				else
					e="Yes"
				fi
			fi
			if [ -z "${e}" ]; then
				M0="$(sed -e ${i}'s|.*||' <<< "${M0}")"
			else
				[ "${e}" != "Yes" ] || \
					_usr_notify "Invalid option '${m}'." "" "y"
				if [ -z "${err}" ]; then
					JA_DIALOG_LABEL="${i}"
					err="Yes"
				fi
			fi
		fi
		i=$((${i}+1))
	done
	if [ -n "${err}" ]; then
		M="${M0}"
	else
		_${JA_MODULE}_refresh "y"
	fi
}

_wrksplf() {
	local job f datesplf
	local wtr wtr_cgrp wtr_maxjobs wtr_ctl
	local outq outq_wtr outq_maxjobs outq_onerror
	local jobs_active jobs_active_wtr
	local a job f datesplf line DIALOG job_pid job_pids status
	local lastkey M cmd_options all_splfs all_splfs_count rc
	local autorefresh="${JA_AUTOREFRESH:-}"

	if [ -n "${JA_JOB}" ]; then
		[ -z "${JA_PID}" ] || \
			JA_PID="$(_job_exist_exec)" || \
				return 1
	fi

	JA_DIALOG_COMMANDS="\Z1S\Zntrwtr dis\Z1P\Znlay \Z1E\Znnd \Z1H\Znold \
\Z1R\Znelease \Z1C\Znhgsplfa \Z1D\Znltsplf dspsplf\Z1A\Zn"
	JA_DIALOG_FKEYS="$(_dialog_fkeys "F1 F2 F4 F5 F6 F9 F11 F12")"
	JA_DIALOG_LABEL=""

	_wrksplf_chgview
	_wrksplf_refresh
	rc=0
	while :; do
		_dialog_init
		DIALOG="$(_dialog_header "${JA_MODULE_NAME}")"
		line=1
		i=0
		unset f1 f2 f3 f4 f5 f6 f7 f8
		while read f1 f2 f3 f4 f5 f6 f7 f8; do
			[ -n "${f1}" ] || continue
			# formatted listing of job data
			grep -qsE '^WTR|^OUTQ' <<< "${f1}" || \
				[ "${f5}" = "-" ] || \
				f5="$(_datetime --date=@${f5})"

			i=$((${i}+1))
			m="$(_print_line "${i}" <<< "${M}")"
			case "${JA_SEQ}" in
			2)
				DIALOG="${DIALOG}$(_dialog_line "${i}" "${m}" \
					"${f1}" \
					"${f2}" \
					"${f3}" \
					"${f4}" \
					"${f5}" \
					"${f6}")"
				;;
			*)
				DIALOG="${DIALOG}$(_dialog_line "${i}" "${m}" \
					"${f1}" \
					"${f2}" \
					"${f3}" \
					"${f4}" \
					"${f5}")"
				;;
			esac
			line=$((${line}+1))
			unset f1 f2 f3 f4 f5 f6 f7 f8
		done <<< "${all_splfs}"
		_interactive_dialog || \
			break
	done
	_dialog_end
	return "${rc}"
} # wrksplf
