# /etc/cgconfig.conf

# Copyright (C) 2008-2013 Jordi Pujol <jordi_pujol AT telefonica DOT net>

# This configuration instructs the kernel
# to give priority to critical system processes.
#
# Priority is given in the following order, from high to low:
# - system critical tasks
# - communications tasks
# - X server
# - user tasks
# - servers, www, ftp, ...
# - batch
#
# Observe that system processes have cpu.shares = 1024
# the other processes should get values minor that this
# to achieve the best system performance,
#
# see the package docs for other sample files

# To get an overview of available (enabled & disabled) subsystems and
# their subsystem name run cat /proc/cgroups
# # cat /proc/cgroups
# #subsys_name    hierarchy       num_cgroups     enabled
# blkio   0       1       1
# cpu     2       16      1
# cpuacct 0 1 1
# cpuset 0 1 1
# memory 0 1 0
# devices 0 1 1
# freezer 0 1 1

# blkio,cpu,cpuset,cpuacct,memory,devices,freezer,net_cls,perf_event

# Disable subsystems (controllers): cgroup_disable=subsys1[,subsys2]
# Enable subsystems (controllers): cgroup_enable=subsys1[,subsys2]
# (Kernel Parameter)

group . {
	perm {
		task {
				uid = root;
				gid = adm;
		}
		admin {
				uid = root;
				gid = adm;
		}
	}
	cpu {
	}
}

# system
# system tasks, kernel
group sys.sys {
	perm {
		task {
				uid = root;
				gid = adm;
		}
		admin {
				uid = root;
				gid = adm;
		}
	}
	cpu {
		cpu.policy = -1;
		cpu.shares = 1024;
	}
}

# communications, critical processes only
group sys.cmn {
	perm {
		task {
				uid = root;
				gid = adm;
		}
		admin {
				uid = root;
				gid = adm;
		}
	}
	cpu {
		cpu.policy = 3;
		cpu.nice = -10;
		cpu.shares = 900;
	}
}

# system control tasks,
group sys.ctl {
	perm {
		task {
				uid = root;
				gid = adm;
		}
		admin {
				uid = root;
				gid = adm;
		}
	}
	cpu {
		cpu.nice = -10;
		cpu.shares = 900;
	}
}

# users

# batch processes
group batch.batch {
	perm {
		task {
			uid = root;
			gid = users;
		}
		admin {
			uid = root;
			gid = adm;
		}
	}
	cpu {
		cpu.policy = 3;
		cpu.shares = 400;
	}
}

# batch processes for programmers
group batch.pgmr {
	perm {
		task {
			uid = root;
			gid = users;
		}
		admin {
			uid = root;
			gid = adm;
		}
	}
	cpu {
		cpu.policy = 3;
		cpu.shares = 450;
	}
}

# interactive

# realtime tasks
group inter.realtime {
	perm {
		task {
			uid = root;
			gid = audio;
		}
		admin {
			uid = root;
			gid = adm;
		}
	}
	cpu {
		cpu.policy = 1;
		cpu.shares = 800;
	}
}

# interactive processes
group inter.inter {
	perm {
		task {
			uid = root;
			gid = users;
		}
		admin {
			uid = root;
			gid = adm;
		}
	}
	cpu {
		cpu.shares = 600;
	}
}

# interactive processes, low priority
group inter.intlp {
	perm {
		task {
			uid = root;
			gid = users;
		}
		admin {
			uid = root;
			gid = adm;
		}
	}
	cpu {
		cpu.policy = 3;
		cpu.shares = 400;
	}
}

# KDE-QT-X11 interactive services,
group inter.service {
	perm {
		task {
			uid = root;
			gid = users;
		}
		admin {
			uid = root;
			gid = adm;
		}
	}
	cpu {
		cpu.policy = 3;
		cpu.shares = 700;
	}
}

# desktop plugins, KDE-QT
group inter.plugin {
	perm {
		task {
			uid = root;
			gid = users;
		}
		admin {
			uid = root;
			gid = adm;
		}
	}
	cpu {
		cpu.shares = 650;
	}
}

# the X server, KDE-GNOME servers
group inter.X {
	perm {
		task {
			uid = root;
			gid = users;
		}
		admin {
			uid = root;
			gid = adm;
		}
	}
	cpu {
		cpu.policy = 3;
		cpu.nice = -10;
		cpu.shares = 700;
	}
}

# services

# all servers, in general
# examples: www, ftp, ssh
group srv.server {
	perm {
		task {
				uid = root;
				gid = adm;
		}
		admin {
				uid = root;
				gid = adm;
		}
	}
	cpu {
		cpu.policy = 3;
		cpu.shares = 500;
	}
}

# printing tasks
group srv.spool {
	perm {
		task {
				uid = root;
				gid = adm;
		}
		admin {
				uid = root;
				gid = adm;
		}
	}
	cpu {
		cpu.policy = 3;
		cpu.shares = 500;
	}
}

# controllers
mount {
	cpu = /sys/fs/cgroup/libcg;
	"name=libcg" = /sys/fs/cgroup/libcg;
}
